import{b as s,a as n}from"./CqGjWW6k.js";import{b as h,p as w}from"./Cx6cA6Ki.js";async function O(o,l,c,y,u,p){let b={passkey_name:l,magic_link_id:u},i={"Content-Type":"application/json",Accept:"application/json"};p?i["x-pwd-csrf-token"]=p:i["x-csrf-token"]=h();let a=await(await fetch(`/auth/v1/users/${o}/webauthn/register/start`,{method:"POST",headers:i,body:JSON.stringify(b)})).json();if("error"in a)return{error:a.error.message||"did not receive any registration data"};let e=a;if(!e.publicKey){let t="no publicKey in options from the backend";return console.error(t,e),{error:t}}if(e.publicKey.challenge=s(e.publicKey.challenge),e.publicKey.user.id=s(e.publicKey.user.id),e.publicKey.excludeCredentials)for(let t of e.publicKey.excludeCredentials)t.id=s(t.id);let d=(e.publicKey.timeout||6e4)-1e3;const m=new Date().getTime()+d;let r;try{const t=await w(navigator.credentials.create(e),d);if(t)r=t;else return{error:c}}catch{return{error:new Date().getTime()>=m?y:c}}let g={passkey_name:l,data:{id:r.id,rawId:n(r.rawId),response:{attestationObject:n(r.response.attestationObject),clientDataJSON:n(r.response.clientDataJSON)},extensions:r.getClientExtensionResults(),type:r.type},magic_link_id:u},f=await fetch(`/auth/v1/users/${o}/webauthn/register/finish`,{method:"POST",headers:i,body:JSON.stringify(g)});return f.status===201?{}:{error:(await f.json()).error?.message||"Registration failed"}}export{O as w};
